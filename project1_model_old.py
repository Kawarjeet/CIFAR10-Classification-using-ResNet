# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XhlBy8t4ihOfhaov4ol2Bwmk-RP0jvEU
"""

import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms
from torch.utils.tensorboard import SummaryWriter
from itertools import product


# Device configuration
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Hyper-parameters tuning
# To make the experimentation easy, we will pull out our hard-coded hyperparameter values and turn them into variables.
# We accomplish this by creating a set of parameters for each run, and package all of them up in a single iterable for our train model
num_epochs= 50
parameters = dict(
    learning_rate = [0.1, .01, .001, .0001]
    ,batch_size_list = [100, 500 ,1000]
    ,shuffle = [True, False]
)
param_values = [v for v in parameters.values()]
print(param_values)


# Image preprocessing modules
transform = transforms.Compose([
    transforms.Pad(4),
    transforms.RandomHorizontalFlip(),
    transforms.RandomCrop(32),
    transforms.ToTensor()])


# CIFAR-10 dataset
train_dataset = torchvision.datasets.CIFAR10(root='../../data/',
                                             train=True, 
                                             transform=transform,
                                             download=True)

test_dataset = torchvision.datasets.CIFAR10(root='../../data/',
                                            train=False, 
                                            transform=transforms.ToTensor())

# Data loader
test_loader = torch.utils.data.DataLoader(dataset=test_dataset,
                                          batch_size=100, 
                                          shuffle=False)

# 3x3 convolution
def conv3x3(in_channels, out_channels, stride=1):
    return nn.Conv2d(in_channels, out_channels, kernel_size=3, 
                     stride=stride, padding=1, bias=False)

# Residual block
class BasicBlock(nn.Module):
    def __init__(self, in_channels, out_channels, stride=1, downsample=None):
        super(BasicBlock, self).__init__()
        self.conv1 = conv3x3(in_channels, out_channels, stride)
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = conv3x3(out_channels, out_channels)
        self.bn2 = nn.BatchNorm2d(out_channels)
        self.downsample = downsample

    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        if self.downsample:
            residual = self.downsample(x)
        out += residual
        out = self.relu(out)
        return out

# ResNet
class ResNet(nn.Module):
    def __init__(self, block, layers, num_classes=10):
        super(ResNet, self).__init__()
        self.in_channels = 16
        self.conv = conv3x3(3, 16)
        self.bn = nn.BatchNorm2d(16)
        self.relu = nn.ReLU(inplace=True)
        self.layer1 = self.make_layer(block, 16, layers[0])
        self.layer2 = self.make_layer(block, 32, layers[1], 2)
        self.layer3 = self.make_layer(block, 64, layers[2], 2)
        self.avg_pool = nn.AvgPool2d(8)
        self.fc = nn.Linear(64, num_classes)

    def make_layer(self, block, out_channels, blocks, stride=1):
        downsample = None
        if (stride != 1) or (self.in_channels != out_channels):
            downsample = nn.Sequential(
                conv3x3(self.in_channels, out_channels, stride=stride),
                nn.BatchNorm2d(out_channels))
        layers = []
        layers.append(block(self.in_channels, out_channels, stride, downsample))
        self.in_channels = out_channels
        for i in range(1, blocks):
            layers.append(block(out_channels, out_channels))
        return nn.Sequential(*layers)

    def forward(self, x):
        out = self.conv(x)
        out = self.bn(out)
        out = self.relu(out)
        out = self.layer1(out)
        out = self.layer2(out)
        out = self.layer3(out)
        out = self.avg_pool(out)
        out = out.view(out.size(0), -1)
        out = self.fc(out)
        return out


def get_num_correct(preds, labels):
    return preds.argmax(dim=1).eq(labels).sum().item()

# Loss function 
criterion = nn.CrossEntropyLoss()

# For updating learning rate
def update_lr(optimizer, lr):    
    for param_group in optimizer.param_groups:
        param_group['lr'] = lr

from torchsummary import summary

model = ResNet(BasicBlock, [2, 2, 2]).to(device)
summary(model, (3, 32, 32))

def project1_model():
    return ResNet(BasicBlock, [2, 2, 2])

# Train the model using iterable parameters that we defined earlier
for lr, batch_size, shuffle in product(*param_values):
      model = ResNet(BasicBlock, [2, 2, 2]).to(device)
      train_loader = torch.utils.data.DataLoader(dataset=train_dataset,
                                           batch_size=batch_size, 
                                           shuffle=shuffle)
      optimizer = torch.optim.Adam(model.parameters(), lr=lr)
      image, label = next(iter(train_loader))
      grid = torchvision.utils.make_grid(image)
      comment=f' batch_size={batch_size} lr={lr}'
      tb = SummaryWriter(comment=comment)
      tb.add_image('images', grid)
      tb.add_graph(model, image.to(device))

      

      total_step = len(train_loader)
      curr_lr = lr
      print (" Batch Size: {:.4f} Learning Rate: {:.4f} Shuffle: {}"
                   .format(batch_size, lr, shuffle))
      for epoch in range(num_epochs):
        train_loss = 0
        correct = 0
        total = 0
        top_accuracy =0
        for i,(images,labels) in enumerate(train_loader):
              images = images.to(device)
              
              labels = labels.to(device)

              # Forward pass
              outputs = model(images)
              loss = criterion(outputs, labels)


              # Backward and optimize
              optimizer.zero_grad()
              loss.backward()
              optimizer.step()
              train_loss += loss.item()
              _, predicted = outputs.max(1)
              total+= labels.size(0)
              correct += predicted.eq(labels).sum().item()
              top_accuracy = max(top_accuracy, 100.*correct/total)
            
              
              if (i+1) % 50 == 0:
                print (f"Epoch:  {epoch+1}/{num_epochs} Step: {i+1}/{total_step}",'Loss: %.3f  | Acc: %.3f%% (%d/%d)'%(train_loss/(i+1), 100.*correct/total, correct, total))
        
        # for visualization of our results using different hyperparameters, we exploit the usage of tensorboard 
        tb.add_scalar(
          'Loss', train_loss/(i+1), epoch
        )
        tb.add_scalar(
            'Number Correct', correct, epoch
        )
        tb.add_scalar(
            'Accuracy', 100.*correct/total, epoch
        ) 
        for name, param in model.named_parameters():
          tb.add_histogram(name, param, epoch)
          tb.add_histogram(f'{name}.grad', param.grad, epoch)
        tb.close()
      

        # Decay learning rate
        if (epoch+1) % 20 == 0:
            curr_lr /= 3
            update_lr(optimizer, curr_lr)


      # Test the model
      model.eval()
      with torch.no_grad():
          correct = 0
          total = 0
          for images, labels in test_loader:
              images = images.to(device)
              labels = labels.to(device)
              outputs = model(images)
              _, predicted = torch.max(outputs.data, 1)
              total += labels.size(0)
              correct += (predicted == labels).sum().item()

          print('Accuracy of the model on the test images: {} %'.format(100 * correct / total))
      model_path = './project_model.pt'
      torch.save(model.state_dict(), model_path)
